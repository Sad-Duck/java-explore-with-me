DROP TABLE IF EXISTS locations, users, categories, events, requests, compilation CASCADE;

CREATE TABLE IF NOT EXISTS locations (
    lat FLOAT NOT NULL,
    lon FLOAT NOT NULL,
    PRIMARY KEY (lat, lon)
    );

CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    email VARCHAR UNIQUE,
    name VARCHAR
    );

CREATE TABLE IF NOT EXISTS categories (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    name VARCHAR UNIQUE NOT NULL
    );

CREATE TABLE IF NOT EXISTS events (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    annotation VARCHAR NOT NULL,
    category_id INTEGER,
    confirmed_requests INTEGER,
    created_on TIMESTAMP WITHOUT TIME ZONE,
    description VARCHAR,
    event_date TIMESTAMP WITHOUT TIME ZONE,
    initiator_id INTEGER,
    lat FLOAT,
    lon FLOAT,
    paid BOOLEAN,
    participant_limit INTEGER,
    published_on TIMESTAMP WITHOUT TIME ZONE,
    request_moderation BOOLEAN,
    state VARCHAR,
    title VARCHAR,
    views INTEGER,
    compilation_id INTEGER,
    CONSTRAINTEGER fk_events_to_categories FOREIGN KEY(category_id) REFERENCES categories(id),
    CONSTRAINTEGER fk_events_to_users FOREIGN KEY(initiator_id) REFERENCES users(id),
    CONSTRAINTEGER fk_events_to_locations FOREIGN KEY(lat, lon) REFERENCES locations(lat, lon)
    );

CREATE TABLE IF NOT EXISTS requests (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    created TIMESTAMP WITHOUT TIME ZONE,
    event_id INTEGER,
    requester_id INTEGER,
    status VARCHAR,
    CONSTRAINTEGER event_id_requester_id UNIQUE(event_id, requester_id),
    CONSTRAINTEGER fk_requests_to_events FOREIGN KEY(event_id) REFERENCES events(id),
    CONSTRAINTEGER fk_requests_to_users FOREIGN KEY(requester_id) REFERENCES users(id));

CREATE TABLE IF NOT EXISTS compilations (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    pinned BOOLEAN,
    title VARCHAR);